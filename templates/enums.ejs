const _name = Symbol.for('bungie-enum')

export function validateEnum (value, obj) {
  if (!(_name in Object(obj))) {
    throw new Error('Expected enum object')
  }
  if (Array.isArray(value)) {
    return value.map(item => validateEnum(item, obj))
  }
  if (typeof value === 'string') {
    value = parseInt(value)
  }
  if (!Object.values(obj).includes(value)) {
    throw new Error(`Invalid ${obj[_name]} enum value: ${value}`)
  }
  return value
}
<%_ for (const obj of enums) { _%>

/**
  <%_ if (obj.description) { _%>
 * <%- obj.description %>
  <%_ } _%>
 * @see https://bungie-net.github.io/#/components/schemas/<%- obj.name %>
 */
export const <%- obj.identifier %> = {
  <%_ for (const item of obj.items) { _%>
    <%_ if (item.description) { _%>
  /**
   * <%- item.description %>
   */
    <%_ } _%>
  <%- item.key %>: <%- item.value %>,
  <%_ } _%>
  /**
   * Original enum name extracted from OpenAPI spec file.
   */
  [_name]: '<%- obj.name %>'
}
<%_ } _%>
