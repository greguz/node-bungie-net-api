<%_ for (const method of methods) { _%>
  <%_ for (const arg of method.arguments) { _%>
    <%_ if (isObjectLikeSchema(arg.schema)) { _%>
export interface <%- compileInterfaceIdentifier(arg, method) %> {
      <%_ for (const property of iterateSchemaProperties(arg.schema)) { _%>
        <%_ if (property.description || property.schema.description) { _%>
  /**
   * <%- stripCRLF(property.description || property.schema.description) %>
   */
        <%_ } _%>
  <%- property.identifier %><%_ if (!property.required) { _%>?<% } %>: <%- compileTypeScriptType(property.schema) %>;
      <%_ } _%>
}

    <%_ } _%>
  <%_ } _%>
<%_ } _%>
export declare class <%- identifier %> {
  /**
   * @constructor
   */
  constructor (api: any)
<%_ for (const method of methods) { _%>
  /**
  <%_ if (method.description) { _%>
   * <%- method.description %>
  <%_ } _%>
   * @see https://bungie-net.github.io/#<%- method.swagger.operationId %>
   *
   <%_ for (const arg of method.arguments) { _%>
   * <%- compileJSDocArgument(arg) %>
   <%_ } _%>
   * @returns {Promise}
   */
  <%- method.identifier %> (<%- method.arguments.map(arg => compileTypeScriptArgument(arg, method)).join(', ') %>): Promise<any>
<%_ } _%>
}
